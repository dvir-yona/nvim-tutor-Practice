[
    {
        "lesson": "Lesson 0",
        "content": "NOTE: The commands in the lessons will modify the text, but those changes\nwon't be saved. Don't worry about messing things up; just remember that\npressing [<Esc>](<Esc>) and then [u](u) will undo the latest change.\n\nThis tutorial is interactive, and there are a few things you should know.\n- Type [<Enter>](<Enter>) on links [like this](holy-grail    ) to open the linked help section.\n- Or simply type [K](K) on any word to find its documentation!\n- You can close this help window with `:q`{vim} `<Enter>`{normal}\n\nWhen there is a ✗ sign at the left, you will be required to modify text.\nOnce you have done the changes correctly, the ✗ sign at the left will change\nto ✓. I imagine you can already see how neat Neovim can be.\n\nOther times, you'll be prompted to run a command (I'll explain this later):\n\n    `:help`{vim} `<Enter>`{normal}\n\nor press a sequence of keys\n~~~ normal\n    <Esc>0f<Space>d3wP$P\n~~~\nText within <'s and >'s (like `<Enter>`{normal}) describes a key to press\ninstead of text to type.\n\nNow, move to the next lesson (use the `j`{normal} key to scroll down)."
    },
    {
        "lesson": "Lesson 1.1: MOVING THE CURSOR",
        "content": "** To move the cursor, press the `h`, `j`, `k`, `l` keys as indicated. **\n\n          ↑\n          k         Hint: The `h`{normal} key is at the left and moves left.\n     ← h    l →           The `l`{normal} key is at the right and moves right.\n         j                The `j`{normal} key looks like a down arrow.\n         ↓\n\n 1. Move the cursor around the screen until you are comfortable.\n\n 2. Hold down the down key (`j`{normal}) until it repeats.\n    Now you know how to move to the next lesson.\n\n 3. Using the down key, move to Lesson 1.2.\n\nNOTE: If you are ever unsure about something you typed, press <Esc> to place\n      you in Normal mode. Then retype the command you wanted.\n\nNOTE: The cursor keys should also work. But using hjkl you will be able to\n      move around much faster, once you get used to it."
    },
    {
        "lesson": "Lesson 1.2: EXITING NEOVIM",
        "content": "!! NOTE: Before executing any of the steps below, read the entire lesson !!\n\n 1. Press the <Esc> key (to make sure you are in Normal mode).\n\n 2. Type:\n\n    `:q!`{vim} `<Enter>`{normal}\n\n    This quits the editor, DISCARDING any changes you have made.\n\n 3. Open Neovim and get back here by executing the command that got you into\n    this tutorial. That might be:\n\n    `:Tutor`{vim} `<Enter>`{normal}\n\n 4. If you have these steps memorized and are confident, execute steps\n    1 through 3 to exit and re-enter the editor.\n\nNOTE: [:q!](:q) `<Enter>`{normal} discards any changes you made. In a few lessons you\n      will learn how to save the changes to a file.\n\n 5. Move the cursor down to Lesson 1.3."
    },
    {
        "lesson": "Lesson 1.3: TEXT EDITING: DELETION",
        "content": "** Press `x`{normal} to delete the character under the cursor. **\n\n 1. Move the cursor to the line below marked ✗.\n\n 2. To fix the errors, move the cursor until it is on top of the\n    character to be deleted.\n\n 3. Press [the x key](x) to delete the unwanted character.\n\n 4. Repeat steps 2 through 4 until the sentence is correct.\n\nThe ccow jumpedd ovverr thhe mooon.\n\n 5. Now that the line is correct, go on to Lesson 1.4.\n\nNOTE: As you go through this tutorial, do not try to memorize everything,\n      your Neovim vocabulary will expand with usage. Consider returning to\n      this tutorial periodically for a refresher."
    },
    {
        "lesson": "Lesson 1.4: TEXT EDITING: INSERTION",
        "content": "** Press `i`{normal} to insert text. **\n\n 1. Move the cursor to the first line below marked ✗.\n\n 2. To make the first line the same as the second, move the cursor on top\n    of the first character AFTER where the text is to be inserted.\n\n 3. Press `i`{normal} and type in the necessary additions.\n\n 4. As each error is fixed press `<Esc>`{normal} to return to Normal mode.\n    Repeat steps 2 through 4 to correct the sentence.\n\nThere is text misng this .\nThere is some text missing from this line.\n\n 5. When you are comfortable inserting text move to Lesson 1.5."
    },
    {
        "lesson": "Lesson 1.5: TEXT EDITING: APPENDING",
        "content": "** Press `A`{normal} to append text. **\n\n 1. Move the cursor to the first line below marked ✗.\n    It does not matter on what character the cursor is in that line.\n\n 2. Press [A](A) and type in the necessary additions.\n\n 3. As the text has been appended press `<Esc>`{normal} to return to Normal\n    mode.\n\n 4. Move the cursor to the second line marked ✗ and repeat\n    steps 2 and 3 to correct this sentence.\n\nThere is some text missing from th\nThere is some text missing from this line.\nThere is also some text miss\nThere is also some text missing here.\n\n 5. When you are comfortable appending text move to Lesson 1.6."
    },
    {
        "lesson": "Lesson 1.6: EDITING A FILE",
        "content": "** Use `:wq`{vim} to write a file and quit. **\n\n!! NOTE: Before executing any of the steps below, read the entire lesson !!\n\n 1. Exit this tutorial as you did in Lesson 1.2: `:q!`{vim}\n    Or, if you have access to another terminal, do the following there.\n\n 2. At the shell prompt type this command:\n~~~ sh\n    $ nvim tutor\n~~~\n    'nvim' is the command to start the Nvim editor, 'tutor' is the name of\n    the file you wish to edit. Use a file that may be changed.\n\n 3. Insert and delete text as you learned in the previous lessons.\n\n 4. Save the file with changes and exit Neovim with:\n~~~ cmd\n    :wq\n~~~\n    Note you'll need to press `<Enter>` to execute the command.\n\n 5. If you have quit this tutorial in step 1, restart and move down\n    to the following summary.\n\n 6. After reading and understanding the above steps: do them."
    },
    {
        "lesson": "Lesson 2.1: DELETION COMMANDS",
        "content": "** Type `dw`{normal} to delete a word. **\n\n 1. Press `<Esc>`{normal} to make sure you are in Normal mode.\n\n 2. Move the cursor to the line below marked ✗.\n\n 3. Move the cursor to the beginning of a word that needs to be deleted.\n\n 4. Type [d](d)[w](w) to make the word disappear.\n\nThere are a some words fun that don't belong paper in this sentence.\n\n 5. Repeat steps 3 and 4 until the sentence is correct and go to Lesson 2.2."
    },
    {
        "lesson": "Lesson 2.2: MORE DELETION COMMANDS",
        "content": "** Type `d$`{normal} to delete to the end of the line. **\n\n 1. Press `<Esc>`{normal} to make sure you are in Normal mode.\n\n 2. Move the cursor to the line below marked ✗.\n\n 3. Move the cursor to the end of the correct line (AFTER the first . ).\n\n 4. Type `d$`{normal} to delete to the end of the line.\n\nSomebody typed the end of this line twice. end of this line twice.\n\n 5. Move on to Lesson 2.3 to understand what is happening."
    },
    {
        "lesson": "Lesson 2.3: ON OPERATORS AND MOTIONS",
        "content": "Many commands that change text are made from an [operator](operator) and a [motion](navigation).\nThe format for a delete command with the [d](d) delete operator is as follows:\n\n    d   motion\n\n  Where:\n    d      - is the delete operator.\n    motion - is what the operator will operate on (listed below).\n\n  A short list of motions:\n    [w](w) - until the start of the next word, EXCLUDING its first character.\n    [e](e) - to the end of the current word, INCLUDING the last character.\n    [$]($) - to the end of the line, INCLUDING the last character.\n\n  Thus typing `de`{normal} will delete from the cursor to the end of the word.\n\nNOTE: Pressing just the motion while in Normal mode without an operator\n      will move the cursor as specified."
    },
    {
        "lesson": "Lesson 2.4: USING A COUNT FOR A MOTION",
        "content": "** Typing a number before a motion repeats it that many times. **\n\n 1. Move the cursor to the start of the line marked ✓ below.\n\n 2. Type `2w`{normal} to move the cursor two words forward.\n\n 3. Type `3e`{normal} to move the cursor to the end of the third word forward.\n\n 4. Type `0`{normal} ([zero](0)) to move to the start of the line.\n\n 5. Repeat steps 2 and 3 with different numbers.\n\nThis is just a line with words you can move around in.\n\n 6. Move on to Lesson 2.5."
    },
    {
        "lesson": "Lesson 2.5: USING A COUNT TO DELETE MORE",
        "content": "** Typing a number with an operator repeats it that many times. **\n\nIn the combination of the delete operator and a motion mentioned above you\ninsert a count before the motion to delete more:\n     d   number   motion\n\n 1. Move the cursor to the first UPPER CASE word in the line marked ✗.\n\n 2. Type `d2w`{normal} to delete the two UPPER CASE words\n\n 3. Repeat steps 1 and 2 with a different count to delete the consecutive\n    UPPER CASE words with one command\n\nThis ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up."
    },
    {
        "lesson": "Lesson 2.6: OPERATING ON LINES",
        "content": "** Type `dd`{normal} to delete a whole line. **\n\nDue to the frequency of whole line deletion, the designers of Vi decided\nit would be easier to simply type two d's to delete a line.\n\n 1. Move the cursor to the second line in the phrase below.\n\n 2. Type [dd](dd) to delete the line.\n\n 3. Now move to the fourth line.\n\n 4. Type `2dd`{normal} to delete two lines, then press `u`{normal} twice to undo all three lines.\n\n1)  Roses are red,\n2)  Mud is fun,\n3)  Violets are blue,\n4)  I have a car,\n5)  Clocks tell time,\n6)  Sugar is sweet\n7)  And so are you."
    },
    {
        "lesson": "Lesson 2.7: THE UNDO COMMAND",
        "content": "** Press `u`{normal} to undo the last commands, `U`{normal} to fix a whole line. **\n\n 1. Move the cursor to the line below marked ✗ and place it on the first error.\n\n 2. Type `x`{normal} to delete the first unwanted character.\n\n 3. Now type `u`{normal} to undo the last command executed.\n\n 4. This time fix all the errors on the line using the `x`{normal} command.\n\n 5. Now type a capital `U`{normal} to return the line to its original state.\n\n 6. Now type `u`{normal} a few times to undo the `U`{normal} and preceding commands.\n\n 7. Now type `<C-r>`{normal} (Control + R) a few times to redo the commands.\n\nFiix the errors oon thhis line and reeplace them witth undo.\n\n 8. These are very useful commands. Now move on to the Lesson 2 Summary."
    },
    {
        "lesson": "Lesson 3.1: THE PUT COMMAND",
        "content": "** Type `p`{normal} to put previously deleted text after the cursor. **\n\n 1. Move the cursor to the first ✓ line below.\n\n 2. Type `dd`{normal} to delete the line and store it in a Neovim register.\n\n 3. Move the cursor to the c) line, ABOVE where the deleted line should go.\n\n 4. Type `p`{normal} to put the line below the cursor.\n\n 5. Repeat steps 2 through 4 to put all the lines in correct order.\n\nd) Can you learn too?\nb) Violets are blue,\nc) Intelligence is learned,\na) Roses are red,\n\nNOTE: You can also put the text before the cursor with `P`{normal} (capital P)."
    },
    {
        "lesson": "Lesson 3.2: THE REPLACE COMMAND",
        "content": "** Type `rx`{normal} to replace the character at the cursor with x. **\n\n 1. Move the cursor to the first line below marked ✗.\n\n 2. Move the cursor so that it is on top of the first error.\n\n 3. Type `r`{normal} and then the character which should be there.\n\n 4. Repeat steps 2 and 3 until the first line is equal to the second one.\n\nWhan this lime was tuoed in, someone presswd some wrojg keys!\nWhen this line was typed in, someone pressed some wrong keys!\n\n 5. Now move on to Lesson 3.3.\n\nNOTE: Remember that you should be learning by doing, not memorizing."
    },
    {
        "lesson": "Lesson 3.3: THE CHANGE OPERATOR",
        "content": "** To change until the end of a word, type `ce`{normal}. **\n\n 1. Move the cursor to the first line below marked ✗.\n\n 2. Place the cursor on the \"u\" in \"lubw\".\n\n 3. Type `ce`{normal} and the correct word (in this case, type \"ine\" ).\n\n 4. Press `<Esc>`{normal} and move to the next character that needs to be changed.\n\n 5. Repeat steps 3 and 4 until the first sentence is the same as the second.\n\nThis lubw has a few wptfd that mrrf changing usf the change operator.\nThis line has a few words that need changing using the change operator.\n\nNotice that [c](c)e deletes the word and places you in Insert mode."
    },
    {
        "lesson": "Lesson 3.4: MORE CHANGES USING `c`{normal}",
        "content": "** The change operator is used with the same motions as delete. **\n\n 1. The change operator works in the same way as delete. The format is:\n\n        c    [number]   motion\n\n 2. The motions are the same, such as `w`{normal} (word) and `$`{normal} (end of line).\n\n 3. Move to the first line below marked ✗.\n\n 4. Move the cursor to the first error.\n\n 5. Type `c$`{normal} and type the rest of the line like the second and press `<Esc>`{normal}.\n\nThe end of this line needs some help to make it like the second.\nThe end of this line needs to be corrected using the c$ command.\n\nNOTE: You can use the Backspace key to correct mistakes while typing."
    },
    {
        "lesson": "Lesson 4.1: CURSOR LOCATION AND FILE STATUS",
        "content": "** Type `<C-g>`{normal} to show your location in a file and the file status.\n Type `G`{normal} to move to a line in the file. **\n\nNOTE: Read the entire lesson before executing any of these steps!!\n\n 1. Hold down the `<Ctrl>`{normal} key and press `g`{normal}. We call this `<C-g>`{normal}.\n    A message will appear at the bottom of the page with the filename and\n    the position in the file. Remember the line number for Step 3.\n\nNOTE: You may see the cursor position in the lower right corner of the\n      screen. This happens when the ['ruler']('ruler') option is set.\n\n 2. Press [G](G) to move you to the bottom of the file.\n    Type [gg](gg) to move you to the start of the file.\n\n 3. Type the number of the line you were on and then `G`{normal}. This will\n    return you to the line you were on when you first pressed `<C-g>`{normal}.\n\n 4. If you feel confident to do this, execute steps 1 through 3."
    },
    {
        "lesson": "Lesson 4.2: THE SEARCH COMMAND",
        "content": "** Type `/`{normal} followed by a phrase to search for the phrase. **\n\n 1. In Normal mode type the `/`{normal} character. Notice that it and the\n    cursor appear at the bottom of the screen as with the `:`{normal} command.\n\n 2. Now type 'errroor' `<Enter>`{normal}. This is the word you want to search for.\n\n 3. To search for the same phrase again, simply type [n](n).\n    To search for the same phrase in the opposite direction, type [N](N).\n\n 4. To search for a phrase in the backward direction, use [?](?) instead of `/`{normal}.\n\n 5. To go back to where you came from press `<C-o>`{normal}.\n    (keep `<Ctrl>`{normal} pressed down while pressing the letter `o`{normal}).\n    Repeat to go back further. `<C-i>`{normal} goes forward.\n\n\"errroor\" is not the way to spell error; errroor is an error.\n\nNOTE: When the search reaches the end of the file it will continue at the\n      start, unless the ['wrapscan']('wrapscan') option has been reset."
    },
    {
        "lesson": "Lesson 4.3: MATCHING PARENTHESES SEARCH",
        "content": "** Type `%`{normal} to find a matching ), ], or }. **\n\n 1. Place the cursor on any (, [, or { in the line below marked ✓.\n\n 2. Now type the [%](%) character.\n\n 3. The cursor will move to the matching parenthesis or bracket.\n\n 4. Type `%`{normal} to move the cursor to the other matching bracket.\n\n 5. Move the cursor to another (, ), [, ], {, or } and see what `%`{normal} does.\n\nThis ( is a test line with ('s, ['s, ] and {'s } in it. ))\n\nNOTE: This is very useful in debugging a program with unmatched parentheses!"
    },
    {
        "lesson": "Lesson 4.4: THE SUBSTITUTE COMMAND",
        "content": "** Type `:s/old/new/g` to substitute \"new\" for \"old\". **\n\n 1. Move the cursor to the line below marked ✗.\n\n 2. Type\n~~~\n        :s/thee/the/\n~~~\n    NOTE: The [:s](:s) command only changed the first match of \"thee\" in the line.\n\n 3. Now type\n~~~\n        :s/thee/the/g\n~~~\n    Adding the g [flag](:s_flags) means to substitute globally in the line,\n    change all occurrences of \"thee\" in the line.\n\nUsually thee best time to see thee flowers is in thee spring.\n\n 4. To change every occurrence of a character string between two lines, type\n~~~\n        :#,#s/old/new/g\n~~~\n    where # are the line numbers of the range of lines where the\n    substitution is to be done (i.e., `1,3` means from line 1 to line 3, inclusive).\n\n    Type\n~~~\n        :%s/old/new/g\n~~~\n    to change every occurrence in the whole file.\n\n    Type\n~~~\n        :%s/old/new/gc\n~~~\n    to find every occurrence in the whole file, with a prompt whether to\n    substitute or not.\n\nNOTE: You can also select the lines you want to substitute first using Visual mode.\n      This will be explained more in a future lesson."
    },
    {
        "lesson": "Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND",
        "content": "** Type `:!`{vim} followed by an external command to execute that command. **\n\n 1. Type the familiar command `:`{normal} to set the cursor at the bottom of\n    the screen. This allows you to enter a command-line command.\n\n 2. Now type the [!](!cmd) (exclamation point) character. This allows you to\n    execute any external shell command.\n\n 3. As an example type \"ls\" following the \"!\" and then hit `<Enter>`{normal}.\n    This will show you a listing of your directory, just as if you were\n    at the shell prompt.\n\nNOTE: It is possible to execute any external command this way, and you\n      can include arguments.\n\nNOTE: All `:`{vim} commands are executed when you press `<Enter>`{normal}."
    },
    {
        "lesson": "Lesson 5.2: MORE ON WRITING FILES",
        "content": "** To save the changes made to the text, type `:w`{vim} FILENAME. **\n\n 1. Type `:!{unix:(ls),win:(dir)}`{vim} to get a listing of your directory.\n    You already know you must hit `<Enter>`{normal} after this.\n\n 2. Choose a filename that does not exist yet, such as TEST.\n\n 3. Now type:\n~~~\n        :w TEST\n~~~\n    (where TEST is the filename you chose.)\n\n 4. This saves the current file under the name TEST.\n    To verify this, type `:!{unix:(ls),win:(dir)}`{vim} again to see your directory.\n\nNOTE: If you were to exit Neovim and start it again with `nvim TEST`, the file\n      would be an exact copy of the tutorial when you saved it.\n\n 5. Now remove the file by typing:\n~~~\n        :!{unix:(rm),win:(del)} TEST\n~~~"
    },
    {
        "lesson": "Lesson 5.3: SELECTING TEXT TO WRITE",
        "content": "** To save part of the file, type `v`{normal} motion `:w FILENAME`{vim}. **\n\n 1. Move the cursor to this line.\n\n 2. Press [v](v) and move the cursor to the fifth item below. Notice that the\n    text is highlighted.\n\n 3. Press the `:`{normal} character. At the bottom of the screen\n\n        `:'<,'>`{vim}\n\n    will appear.\n\n 4. Type\n\n        `w TEST`{vim}\n\n    where TEST is a filename that does not exist yet. Verify that you see\n\n        `:'<,'>w TEST`{vim}\n\n    before you press `<Enter>`{normal}.\n\n 5. Neovim will write the selected lines to the file TEST. Use `:!{unix:(ls),win:(dir)}`{vim} to see it.\n    Do not remove it yet! We will use it in the next lesson.\n\nNOTE: Pressing [v](v) starts [Visual selection](visual-mode). You can move the cursor around to\n      make the selection bigger or smaller. Then you can use an operator to\n      do something with the text. For example, `d`{normal} deletes the text."
    },
    {
        "lesson": "Lesson 5.4: RETRIEVING AND MERGING FILES",
        "content": "** To retrieve the contents of a file, type `:r FILENAME`{vim}. **\n\n 1. Place the cursor just above this line.\n\nNOTE: After executing Step 2 you will see text from Lesson 5.3. Then move\n      DOWN to see this lesson again. Press `u`{normal} to undo after you are done.\n\n 2. Now retrieve your TEST file using the command\n\n        `:r TEST`{vim}\n\n    where TEST is the name of the file you used.\n    The file you retrieve is placed below the cursor line.\n\n 3. To verify that a file was retrieved, cursor back and notice that there\n    are now two copies of Lesson 5.3, the original and the retrieved version.\n\nNOTE: You can also read the output of an external command. For example,\n\n        `:r !{unix:(ls),win:(dir)}`{vim}\n\n      reads the output of the `ls` command and puts it below the cursor."
    },
    {
        "lesson": "Lesson 6.1: THE OPEN COMMAND",
        "content": "** Type `o`{normal} to open a line below the cursor and place you in Insert mode. **\n\n 1. Move the cursor to the line below marked ✓.\n\n 2. Type the lowercase letter `o`{normal} to [open](o) up a line BELOW the\n    cursor and place you in Insert mode.\n\n 3. Now type some text and press `<Esc>`{normal} to exit Insert mode. Remove your opened lines after you're done.\n\nAfter typing `o`{normal} the cursor is placed on the open line in Insert mode.\n\n 4. To open up a line ABOVE the cursor, simply type a [capital O](O), rather\n    than a lowercase `o`{normal}. Try this on the line below. Remove your opened lines after you're done.\n\nOpen up a line above this by typing O while the cursor is on this line."
    },
    {
        "lesson": "Lesson 6.2: THE APPEND COMMAND",
        "content": "** Type `a`{normal} to insert text AFTER the cursor. **\n\n 1. Move the cursor to the start of the line below marked ✗.\n\n 2. Press `e`{normal} until the cursor is on the end of \"li\".\n\n 3. Type the lowercase letter `a`{normal} to [append](a) text AFTER the cursor.\n\n 4. Complete the word like the line below it. Press `<Esc>`{normal} to exit Insert mode.\n\n 5. Use `e`{normal} to move to the next incomplete word and repeat steps 3 and 4.\n\nThis li will allow you to pract appendi text to a line.\nThis line will allow you to practice appending text to a line.\n\nNOTE: [a](a), [i](i), and [A](A) all go to the same Insert mode, the only\n      difference is where the characters are inserted."
    },
    {
        "lesson": "Lesson 6.3: ANOTHER WAY TO REPLACE",
        "content": "** Type a capital `R`{normal} to replace more than one character. **\n\n 1. Move the cursor to the first line below marked ✗. Move the cursor to\n    the beginning of the first \"xxx\".\n\n 2. Now press `R`{normal} ([capital R](R)) and type the number below it in the\n    second line, so that it replaces the \"xxx\".\n\n 3. Press `<Esc>`{normal} to leave [Replace mode](mode-replace). Notice that\n    the rest of the line remains unmodified.\n\n 4. Repeat the steps to replace the remaining \"xxx\".\n\nAdding 123 to xxx gives you xxx.\nAdding 123 to 456 gives you 579.\n\nNOTE: Replace mode is like Insert mode, but every typed character\n      replaces an existing character."
    },
    {
        "lesson": "Lesson 6.4: COPY AND PASTE TEXT",
        "content": "** Use the `y`{normal} operator to copy text and `p`{normal} to put it. **\n\n 1. Go to the line marked with ✓ below and place the cursor after \"a)\".\n\n 2. Start Visual mode with `v`{normal} and move the cursor to just before\n    \"first\".\n\n 3. Type `y`{normal} to [yank](yank) (copy) the highlighted text.\n\n 4. Move the cursor to the end of the next line: `j$`{normal}\n\n 5. Type `p`{normal} to [put](put) (paste) the text.\n\n 6. Press `a`{normal} and then type \"second\". Press `<Esc>`{normal} to leave\n    Insert mode.\n\n 7. Use Visual mode to select \"item.\", yank it with `y`{normal}, move to the\n    end of the next line with `j$`{normal} and put the text there with `p`{normal}\n\na) This is the first item.\nb)\n\nNOTE: You can use `y`{normal} as an operator: `yw`{normal} yanks one word.\n\nNOTE: You can use `P`{normal} to put before the cursor, rather than after."
    },
    {
        "lesson": "Lesson 6.5: SET OPTION",
        "content": "** Set an option so search and substitute commands ignore case. **\n\nThere are many settings in Neovim that you can configure to suit your needs.\n\n 1. Search for 'ignore' by entering: `/ignore`\n    Repeat several times by pressing `n`{normal}.\n\n 2. Set the 'ic' (Ignore case) option by entering:\n~~~\n        :set ic\n~~~\n 3. Now search for 'ignore' again by pressing `n`{normal}.\n    Notice that Ignore and IGNORE are now also found.\n\n 4. Set the 'hlsearch' and 'incsearch' options:\n~~~\n        :set hls is\n~~~\n 5. Now type the search command again and see what happens: /ignore <Enter>\n\n 6. To disable ignoring case enter:\n~~~\n        :set noic\n~~~\n 7. To invert the value of a setting, prepend it with \"inv\":\n~~~\n        :set invic\n~~~\nNOTE: To remove the highlighting of matches enter:\n~~~\n        :nohlsearch\n~~~\nNOTE: If you want to ignore case for just one search command, use [\\c](//\\c)\n      in the phrase: /ignore\\c <Enter>"
    },
    {
        "lesson": "Lesson 7.1: GETTING HELP",
        "content": "** Use the online help system. **\n\nNeovim has a comprehensive online help system.\n\nTo get started, try one of these two:\n\n  - press the `<F1>`{normal} key (if you have one)\n  - type `:help`{vim}\n\nRead the text in the help window to find out how the help works.\nType `<C-w><C-w>`{normal} to jump from one window to another.\nType `:q`{vim} to close the help window.\n\nYou can find help on just about any subject, by giving an argument to the\n\":help\" command. Try these (don't forget to press <Enter>):\n~~~\n    :help w\n    :help c_CTRL-D\n    :help insert-index\n    :help user-manual\n~~~"
    },
    {
        "lesson": "Lesson 7.2: CREATE A STARTUP SCRIPT",
        "content": "** Enable Neovim features. **\n\nNeovim is a very configurable editor. You can customise it any way you like.\nTo start using more features create an \"init.vim\" file.\n\n 1. Start editing the \"init.vim\" file.\n\n    `:call mkdir(stdpath('config'),'p')`{vim}\n    `:exe 'edit' stdpath('config').'/init.vim'`{vim}\n\n 2. Write the file with:\n\n    `:w`{vim}\n\nYou can add all your preferred settings to this \"init.vim\" file.\nFor more information type `:help init.vim`{vim}."
    },
    {
        "lesson": "Lesson 7.3: COMPLETION",
        "content": "** Command line completion with `<C-d>`{normal} and `<Tab>`{normal}. **\n\n 1. List the contents of the current directory: `:!{unix:(ls),win:(dir)}`{vim}\n\n 2. Type the start of a command: `:e`{vim}\n\n 3. Press `<C-d>`{normal} and Neovim will show a list of commands beginning with \"e\".\n\n 4. Press `<Tab>`{normal} and Neovim will complete the command name to \":edit\".\n\n 5. Now add a space and the start of an existing file name: `:edit FIL`{vim}\n\n 6. Press `<Tab>`{normal}. Neovim will complete the name (\"FIL\" -> \"FILE\", if it is unique).\n\nNOTE: Completion works for many commands. It is especially useful for `:help`{vim}."
    },
    {
        "lesson": "Lesson 7.1: GETTING HELP",
        "content": "** Use the online help system. **\n\nNeovim has a comprehensive online help system.\n\nTo get started, try one of these two:\n\n  - press the `<F1>`{normal} key (if you have one)\n  - type `:help`{vim}\n\nRead the text in the help window to find out how the help works.\nType `<C-w><C-w>`{normal} to jump from one window to another.\nType `:q`{vim} to close the help window.\n\nYou can find help on just about any subject, by giving an argument to the\n\":help\" command. Try these (don't forget to press <Enter>):\n~~~\n    :help w\n    :help c_CTRL-D\n    :help insert-index\n    :help user-manual\n~~~"
    },
    {
        "lesson": "Lesson 7.2: CREATE A STARTUP SCRIPT",
        "content": "** Enable Neovim features. **\n\nNeovim is a very configurable editor. You can customise it any way you like.\nTo start using more features create an \"init.vim\" file.\n\n 1. Start editing the \"init.vim\" file.\n\n    `:call mkdir(stdpath('config'),'p')`{vim}\n    `:exe 'edit' stdpath('config').'/init.vim'`{vim}\n\n 2. Write the file with:\n\n    `:w`{vim}\n\nYou can add all your preferred settings to this \"init.vim\" file.\nFor more information type `:help init.vim`{vim}."
    },
    {
        "lesson": "Lesson 7.3: COMPLETION",
        "content": "** Command line completion with `<C-d>`{normal} and `<Tab>`{normal}. **\n\n 1. List the contents of the current directory: `:!{unix:(ls),win:(dir)}`{vim}\n\n 2. Type the start of a command: `:e`{vim}\n\n 3. Press `<C-d>`{normal} and Neovim will show a list of commands beginning with \"e\".\n\n 4. Press `<Tab>`{normal} and Neovim will complete the command name to \":edit\".\n\n 5. Now add a space and the start of an existing file name: `:edit FIL`{vim}\n\n 6. Press `<Tab>`{normal}. Neovim will complete the name (\"FIL\" -> \"FILE\", if it is unique).\n\nNOTE: Completion works for many commands. It is especially useful for `:help`{vim}."
    },
    {
        "lesson": "https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ - 1st Level – Survive",
        "content": "1st Level – Survive\n\n    Install vim\n    Launch vim\n    DO NOTHING! Read.\n\nIn a standard editor, typing on the keyboard is enough to write something and see it on the screen. Not this time. Vim is in Normal mode. Let’s go to Insert mode. Type the letter i.\n\nYou should feel a bit better. You can type letters like in a standard editor. To get back to Normal mode just press the ESC key.\n\nYou now know how to switch between Insert and Normal mode. And now, here are the commands that you need in order to survive in Normal mode:\n\n        i → Insert mode. Type ESC to return to Normal mode.\n        x → Delete the char under the cursor\n        :wq → Save and Quit (:w save, :q quit)\n        dd → Delete (and copy) the current line\n        p → Paste\n\n    Recommended:\n\n        hjkl (highly recommended but not mandatory) → basic cursor move (←↓↑→). Hint: j looks like a down arrow.\n        :help <command> → Show help about <command>. You can use :help without a <command> to get general help.\n\nOnly 5 commands. That is all you need to get started. Once these command start to become natural (maybe after a day or so), you should move on to level 2.\n\nBut first, just a little remark about Normal mode. In standard editors, to copy you have to use the Ctrl key (Ctrl-c generally). In fact, when you press Ctrl, it is as if all of your keys change meaning. Using vim in normal mode is a bit like having the editor automatically press the Ctrl key for you.\n\nA last word about notations:\n\n    instead of writing Ctrl-λ, I’ll write <C-λ>.\n    commands starting with : end with <enter>. For example, when I write :q, I mean :q<enter>."
    },
    {
        "lesson": "https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ - 2nd Level – Feel comfortable",
        "content": "2nd Level – Feel comfortable\n\nYou know the commands required for survival. It’s time to learn a few more commands. These are my suggestions:\n\n    Insert mode variations:\n\n            a → insert after the cursor\n            o → insert a new line after the current one\n            O → insert a new line before the current one\n            cw → replace from the cursor to the end of the word\n\n    Basic moves\n\n            0 → go to the first column\n            ^ → go to the first non-blank character of the line\n            $ → go to the end of line\n            g_ → go to the last non-blank character of line\n            /pattern → search for pattern\n\n    Copy/Paste\n\n            P → paste before, remember p is paste after current position.\n            yy → copy the current line, easier but equivalent to ddP\n\n    Undo/Redo\n\n            u → undo\n            <C-r> → redo\n\n    Load/Save/Quit/Change File (Buffer)\n\n            :e <path/to/file> → open\n            :w → save\n            :saveas <path/to/file> → save to <path/to/file>\n            :x, ZZ or :wq → save and quit (:x only save if necessary)\n            :q! → quit without saving, also: :qa! to quit even if there are modified hidden buffers.\n            :bn (resp. :bp) → show next (resp. previous) file (buffer)\n\nTake the time to learn all of these command. Once done, you should be able to do every thing you are able to do in other editors. You may still feel a bit awkward. But follow me to the next level and you’ll see why vim is worth the extra work."
    },
    {
        "lesson": "https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ - 3rd Level – Better. Stronger. Faster.",
        "content": "3rd Level – Better. Stronger. Faster.\n\nCongratulation for reaching this far! Now we can start with the interesting stuff. At level 3, we’ll only talk about commands which are compatible with the old vi editor.\nBetter\n\nLet’s look at how vim could help you to repeat yourself:\n\n    . → (dot) will repeat the last command,\n    N<command> → will repeat the command N times.\n\nSome examples, open a file and type:\n\n        2dd → will delete 2 lines\n        3p → will paste the text 3 times\n        100idesu [ESC] → will write “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu”\n        . → Just after the last command will write again the 100 “desu”.\n        3. → Will write 3 “desu” (and not 300, how clever).\n\nStronger\n\nKnowing how to move efficiently with vim is very important. Don’t skip this section.\n\n    NG → Go to line N\n    gg → shortcut for 1G - go to the start of the file\n    G → Go to last line\n\n    Word moves:\n\n            w → go to the start of the following word,\n            e → go to the end of this word.\n\n        By default, words are composed of letters and the underscore character. Let’s call a WORD a group of letter separated by blank characters. If you want to consider WORDS, then just use uppercase characters:\n            W → go to the start of the following WORD,\n            E → go to the end of this WORD.\n        Word moves example\n\nNow let’s talk about very efficient moves:\n\n        % : Go to the corresponding (, {, [.\n        * (resp. #) : go to next (resp. previous) occurrence of the word under the cursor\n\nBelieve me, the last three commands are gold.\nFaster\n\nRemember about the importance of vi moves? Here is the reason. Most commands can be used using the following general format:\n\n<start position><command><end position>\n\nFor example : 0y$ means\n\n    0 → go to the beginning of this line\n    y → yank from here\n    $ → up to the end of this line\n\nWe also can do things like ye, yank from here to the end of the word. But also y2/foo yank up to the second occurrence of “foo”.\n\nBut what was true for y (yank), is also true for d (delete), v (visual select), gU (uppercase), gu (lowercase), etc…"
    },
    {
        "lesson": "https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ - 4th Level – Vim Superpowers",
        "content": "4th Level – Vim Superpowers\n\nWith all preceding commands you should be comfortable using vim. But now, here are the killer features. Some of these features were the reason I started to use vim.\nMove on current line: 0 ^ $ g_ f F t T , ;\n\n        0 → go to column 0\n        ^ → go to first character on the line\n        $ → go to the last column\n        g_ → go to the last character on the line\n        fa → go to next occurrence of the letter a on the line. , (resp. ;) will find the next (resp. previous) occurrence.\n        t, → go to just before the character ,.\n        3fa → find the 3rd occurrence of a on this line.\n        F and T → like f and t but backward.\n        Line moves\n\nA useful tip is: dt\" → remove everything until the \".\nZone selection <action>a<object> or <action>i<object>\n\nThese command can only be used after an operator in visual mode. But they are very powerful. Their main pattern is:\n\n<action>a<object> and <action>i<object>\n\nWhere action can be any action, for example, d (delete), y (yank), v (select in visual mode). The object can be: w a word, W a WORD (extended word), s a sentence, p a paragraph. But also, natural character such as \", ', ), }, ].\n\nSuppose the cursor is on the first o of (map (+) (\"foo\")).\n\n        vi\" → will select foo.\n        va\" → will select \"foo\".\n        vi) → will select \"foo\".\n        va) → will select (\"foo\").\n        v2i) → will select map (+) (\"foo\")\n        v2a) → will select (map (+) (\"foo\"))\n\nText objects selection\nSelect rectangular blocks: <C-v>.\n\nRectangular blocks are very useful for commenting many lines of code. Typically: 0<C-v><C-d>I-- [ESC]\n\n    ^ → go to the first non-blank character of the line\n    <C-v> → Start block selection\n    <C-d> → move down (could also be jjj or %, etc…)\n    I-- [ESC] → write -- to comment each line\n\nRectangular blocks\n\nNote: in Windows you might have to use <C-q> instead of <C-v> if your clipboard is not empty.\nCompletion: <C-n> and <C-p>.\n\nIn Insert mode, just type the start of a word, then type <C-p>, magic…\nCompletion\nMacros : qa do something q, @a, @@\n\nqa record your actions in the register a. Then @a will replay the macro saved into the register a as if you typed it. @@ is a shortcut to replay the last executed macro.\n\n    Example\n\n    On a line containing only the number 1, type this:\n\n        qaYp<C-a>q →\n            qa start recording.\n            Yp duplicate this line.\n            <C-a> increment the number.\n            q stop recording.\n        @a → write 2 under the 1\n        @@ → write 3 under the 2\n        Now do 100@@ will create a list of increasing numbers until 103.\n\nMacros\nVisual selection: v,V,<C-v>\n\nWe saw an example with <C-v>. There is also v and V. Once the selection has been made, you can:\n\n    J → join all the lines together.\n    < (resp. >) → indent to the left (resp. to the right).\n    = → auto indent\n\nAutoindent\n\nAdd something at the end of all visually selected lines:\n\n    <C-v>\n    go to desired line (jjj or <C-d> or /pattern or % etc…)\n    $ go to the end of the line\n    A, write text, ESC.\n\nAppend to many lines\nSplits: :split and vsplit.\n\nThese are the most important commands, but you should look at :help split.\n\n        :split → create a split (:vsplit create a vertical split)\n        <C-w><dir> : where dir is any of hjkl or ←↓↑→ to change the split.\n        <C-w>_ (resp. <C-w>|) : maximise the size of the split (resp. vertical split)\n        <C-w>+ (resp. <C-w>-) : Grow (resp. shrink) split\n\nSplit\nConclusion\n\nThat was 90% of the commands I use every day. I suggest that you learn no more than one or two new commands per day. After two to three weeks you’ll start to feel the power of vim in your hands.\n\nLearning Vim is more a matter of training than plain memorization. Fortunately vim comes with some very good tools and excellent documentation. Run vimtutor until you are familiar with most basic commands. Also, you should read this page carefully: :help usr_02.txt.\n\nThen, you will learn about !, folds, registers, plugins and many other features. Learn vim like you’d learn piano and all should be fine."
    }
]
