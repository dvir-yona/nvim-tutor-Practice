[
  {
    "lesson": "Nvim Tutor : Lesson 1.1",
    "content" : "# Lesson 1.1: MOVING THE CURSOR\n\n** To move the cursor, press the `h`, `j`, `k`, `l` keys as indicated. **\n\n          ↑\n          k         Hint: The `h`{normal} key is at the left and moves left.\n     ← h    l →           The `l`{normal} key is at the right and moves right.\n         j                The `j`{normal} key looks like a down arrow.\n         ↓\n\n 1. Move the cursor around the screen until you are comfortable.\n\n 2. Hold down the down key (`j`{normal}) until it repeats.\n    Now you know how to move to the next lesson.\n\nNOTE: The cursor keys should also work. But using hjkl you will be able to\n      move around much faster, once you get used to it."
  },
  {
    "lesson": "Nvim Tutor : Lesson 1.2",
    "content" : "!! NOTE: Before executing any of the steps below, read the entire lesson !!\n\n 1. Press the <Esc> key (to make sure you are in Normal mode).\n\n 2. Type:\n\n    `:q!`{vim} `<Enter>`{normal}\n\n    This quits the editor, DISCARDING any changes you have made."
  },
  {
    "lesson": "Nvim Tutor : 1.3 TEXT EDITING: DELETION",
    "content" : "** Press x in normal mode to delete the character under the cursor. **\n\n 1. Move the cursor to the line below.\n\n 2. To fix the typos, move the cursor until it is on top of the\n    character to be deleted.\n\n 3. Press [the x key](x) to delete the unwanted character.\n\n 4. Repeat steps 2 through 4 until the sentence is correct.\n\nThe ccow jumpedd ovverr thhe mooon."
  },
  {
    "lesson": "Nvim Tutor : 1.4 TEXT EDITING: INSERTION",
    "content" : "** Press i in normal mode to insert text. **\n\n 1. Move the cursor to the first line below.\n\n 2. To make the first line the same as the second, move the cursor on top\n    of the first character AFTER where the text is to be inserted.\n\n 3. Press i in normal mode and type in the necessary additions.\n\n 4. As each error is fixed press <Esc> to return to Normal mode.\n    Repeat steps 2 through 4 to correct the sentence.\n\nThere is text misng this .\nThere is some text missing from this line."
  },
  {
    "lesson": "Nvim Tutor : 1.5 TEXT EDITING: APPENDING",
    "content" : "** Press A to append text. **\n\n 1. Move the cursor to the first line below, move the cursor on top of the first character BEFORE where the text is to be inserted.\n\n 2. Press A and type in the necessary additions.\n\n 3. As the text has been appended press <Esc> to return to Normal\n    mode.\n\n4. repeat steps 1-4 to make lines 1 and 2 the same\n\n1.\nThere is some text missing from th\nThere is some text missing from this line.\n\n2.\nThere is also some text miss\nThere is also some text missing here."
  },
  {
    "lesson": "Nvim Tutor : 1.6 EDITING A FILE",
    "content" : "** Use :wq to write a file and quit. **\n\n!! NOTE: Before executing any of the steps below, read the entire lesson !!\n\n 1. Exit this tutorial :q!\n    Or, if you have access to another terminal, do the following there.\n\n 2. At the shell prompt type this command:\n~~~ sh\n    $ nvim tutor\n~~~\n    'nvim' is the command to start the Nvim editor, 'tutor' is the name of\n    the file you wish to edit. Use a file that may be changed.\n\n 3. Insert and delete text.\n\n 4. Save the file with changes and exit Neovim with:\n    :wq\n    Note you'll need to press `<Enter>` to execute the command.\n\n 5. After reading and understanding the above steps: do them."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.1: DELETION COMMANDS",
    "content" : "** Type dw in normal mode to delete a word. **\n\n 1. Press Esc to make sure you are in Normal mode.\n\n 2. Move the cursor to the line below.\n\n 3. Move the cursor to the beginning of a word that needs to be deleted.\n\n 4. Type d w to make the word disappear.\n\nThere are a some words fun that don't belong paper in this sentence.\n\n 5. Repeat steps 3 and 4 until the sentence is correct."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.2: MORE DELETION COMMANDS",
    "content" : "** Type d$ in normal mode to delete to the end of the line. **\n\n 1. Press Esc to make sure you are in Normal mode.\n\n 2. Move the cursor to the line below.\n\n 3. Move the cursor to the end of the correct line (AFTER the first . ).\n\n 4. Type d$ in normal mode to delete to the end of the line.\n\nSomebody typed the end of this line twice. end of this line twice."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.3: ON OPERATORS AND MOTIONS",
    "content" : "Many commands that change text are made from an operator and a navigation.\nThe format for a delete command with the d delete operator is as follows:\n\n    d   motion\n\n  Where:\n    d      - is the delete operator.\n    motion - is what the operator will operate on (listed below).\n\n  A short list of motions:\n    w - until the start of the next word, EXCLUDING its first character.\n    e - to the end of the current word, INCLUDING the last character.\n    $ - to the end of the line, INCLUDING the last character.\n\n  Thus typing de in normal mode will delete from the cursor to the end of the word.\n\nNOTE: Pressing just the motion while in Normal mode without an operator\n      will move the cursor as specified."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.4: USING A COUNT FOR A MOTION",
    "content" : "** Typing a number before a motion repeats it that many times. **\n\n 1. Move the cursor to the start of the line below.\n\n 2. Type 2w in normal mode to move the cursor two words forward.\n\n 3. Type 3e in normal mode to move the cursor to the end of the third word forward.\n\n 4. Type 0 to move to the start of the line.\n\n 5. Repeat steps 2 and 3 with different numbers.\n\nThis is just a line with words you can move around in."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.5: USING A COUNT TO DELETE MORE",
    "content" : "** Typing a number with an operator repeats it that many times. **\n\nIn the combination of the delete operator and a motion mentioned above you\ninsert a count before the motion to delete more:\n     d   number   motion\n\n 1. Move the cursor to the first UPPER CASE word in the line.\n\n 2. Type d2w in normal mode to delete the two UPPER CASE words\n\n 3. Repeat steps 1 and 2 with a different count to delete the consecutive\n    UPPER CASE words with one command\n\nThis ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.6: OPERATING ON LINES",
    "content" : "** Type dd in normal mode to delete a whole line. **\n\nDue to the frequency of whole line deletion, the designers of Vim decided\nit would be easier to simply type two d's to delete a line.\n\n 1. Move the cursor to the second line in the phrase below.\n\n 2. Type dd to delete the line.\n\n 3. Now move to the fourth line.\n\n 4. Type 2dd in normal mode to delete two lines.\n\n1)  Roses are red,\n2)  Mud is fun,\n3)  Violets are blue,\n4)  I have a car,\n5)  Clocks tell time,\n6)  Sugar is sweet\n7)  And so are you."
  },
  {
    "lesson": "Nvim Tutor : Lesson 2.7: THE UNDO COMMAND",
    "content" : "** Press `u` in normal mode to undo the last commands, `U` in normal mode to undo as much as possible. **\n\n 1. Move the cursor to the line below and place it on the first error.\n\n 2. Type `x` in normal mode to delete the first unwanted character.\n\n 3. Now type `u` in normal mode to undo the last command executed.\n\n 4. This time fix all the typos on the line using the `x` in normal mode command.\n\n 5. Now type a capital `U` in normal mode to return the line to its original state.\n\n 6. Now type `u` in normal mode a few times to undo the `U` in normal mode and preceding commands.\n\n 7. Now type `<C-r>` in normal mode (Control + R) a few times to redo the commands.\n\nFiix the errors oon thhis line and reeplace them witth undo."
  },
  {
    "lesson": "Nvim Tutor : Lesson 3.1: THE PUT COMMAND",
    "content": "** Type `p` in normal mode to put previously deleted text after the cursor. **\n\n 1. Move the cursor to the first line below.\n\n 2. Type `dd` in normal mode to delete the line and store it in a Neovim register.\n\n 3. Move the cursor to the c) line, ABOVE where the deleted line should go.\n\n 4. Type `p` in normal mode to put the line below the cursor.\n\n 5. Repeat steps 2 through 4 to put all the lines in correct order.\n\nd) Can you learn too?\nb) Violets are blue,\nc) Intelligence is learned,\na) Roses are red,\n\nNOTE: You can also put the text before the cursor with `P` in normal mode (capital P)."
  },
  {
    "lesson": "Nvim Tutor : Lesson 3.2: THE REPLACE COMMAND",
    "content": "** Type `rx` in normal mode to replace the character at the cursor with x. **\n\n 1. Move the cursor to the first line below.\n\n 2. Move the cursor so that it is on top of the first typo.\n\n 3. Type `r` in normal mode and then the character which should be there.\n\n 4. Repeat steps 2 and 3 until the first line is equal to the second one.\n\nWhan this lime was tuoed in, someone presswd some wrojg keys!\nWhen this line was typed in, someone pressed some wrong keys!\n\nNOTE: Remember that you should be learning by doing, not memorizing."
  },
  {
    "lesson": "Nvim Tutor : Lesson 3.3: THE CHANGE OPERATOR",
    "content": "** To change until the end of a word, type ce in normal mode. **\n\n 1. Move the cursor to the first line below.\n\n 2. Place the cursor on the \"u\" in \"lubw\".\n\n 3. Type ce in normal mode and the correct word (in this case, type \"ine\" ).\n\n 4. Press <Esc> and move to the next character that needs to be changed.\n\n 5. Repeat steps 3 and 4 until the first sentence is the same as the second.\n\nThis lubw has a few wptfd that mrrf changing usf the change operator.\nThis line has a few words that need changing using the change operator.\n\nNotice that c deletes the word and places you in Insert mode."
  },
  {
    "lesson": "Nvim Tutor : Lesson 3.4: MORE CHANGES USING c",
    "content": "** The change operator is used with the same motions as delete. **\n\n 1. The change operator works in the same way as delete. The format is:\n\n        c    [number]   motion\n\n 2. The motions are the same, such as w(word) and $(end of line).\n\n 3. Move to the first line below.\n\n 4. Move the cursor to the first typo.\n\n 5. Type c$ in normal mode and type the rest of the line like the second and press Esc in normal mode.\n\nThe end of this line needs some help to make it like the second.\nThe end of this line needs to be corrected using the c$ command.\n\nNOTE: You can use the Backspace key to correct mistakes while typing."
  },
  {
    "lesson": "Nvim Tutor : 4.1 CURSOR LOCATION AND FILE STATUS",
    "content" : "** Type `<C-g>` in normal mode to show your location in a file and the file status.\n Type `G` in normal mode to move to a line in the file. **\n\nNOTE: Read the entire lesson before executing any of these steps!!\n\n 1. Hold down the `<Ctrl>` key and press `g` in normal mode. We call this `<C-g>`.\n    A message will appear at the bottom of the page with the filename and\n    the position in the file. Remember the line number for Step 3.\n\nNOTE: You may see the cursor position in the lower right corner of the\n      screen. This happens when the 'ruler' option is set.\n\n 2. Press G to move you to the bottom of the file.\n    Type gg to move you to the start of the file.\n\n 3. Type the number of the line you were on and then `G` in normal mode. This will\n    return you to the line you were on when you first pressed `<C-g>` in normal mode.\n\n 4. If you feel confident to do this, execute steps 1 through 3."
  },
  {
    "lesson": "Nvim Tutor : Lesson 4.2: THE SEARCH COMMAND",
    "content": "** Type / followed by a phrase to search for the phrase. **\n\n 1. In Normal mode type the / character. Notice that it and the\n    cursor appear at the bottom of the screen as with the : command.\n\n 2. Now type 'errroor' <Enter>. This is the word you want to search for.\n\n 3. To search for the same phrase again, simply type n.\n    To search for the same phrase in the opposite direction, type N.\n\n 4. To search for a phrase in the backward direction, use ? instead of /.\n\n 5. To go back to where you came from press <C-o>.\n    (keep <Ctrl> pressed down while pressing the letter o).\n    Repeat to go back further. <C-i> goes forward.\n\n\"errroor\" is not the way to spell typo; errroor is a typo.\n\nNOTE: When the search reaches the end of the file it will continue at the\n      start, unless the wrapscan option has been reset."
  },
  {
    "lesson": "Nvim Tutor : Lesson 4.3: MATCHING PARENTHESES SEARCH",
    "content": "** Type % to find a matching ), ], or }. **\n\n 1. Place the cursor on any (, [, or { in the line below.\n\n 2. Now type the % character.\n\n 3. The cursor will move to the matching parenthesis or bracket.\n\n 4. Type % to move the cursor to the other matching bracket.\n\n 5. Move the cursor to another (, ), [, ], {, or } and see what % does.\n\nThis ( is a test line with ('s, ['s, ] and {'s } in it. ))\n\nNOTE: This is very useful in debugging a program with unmatched parentheses!"
  },
  {
    "lesson": "Nvim Tutor : Lesson 4.4: THE SUBSTITUTE COMMAND",
      "content": "** Type `:s/old/new/g` to substitute \"new\" for \"old\". **\n\n 2. Type\n        :s/thee/the/\n\n    NOTE: The :s command only changed the first match of \"thee\" in the line.\n\n 3. Now type\n        :s/thee/the/g\n\n    Adding the g flag means to substitute globally in the line,\n    change all occurrences of \"thee\" in the line.\n\nUsually thee best time to see thee flowers is in thee spring.\n\n 4. To change every occurrence of a character string between two lines, type\n        :#,#s/old/new/g\n\n    where # are the line numbers of the range of lines where the\n    substitution is to be done (i.e., `1,3` means from line 1 to line 3, inclusive).\n\n    Type\n        :%s/old/new/g\n\n    to change every occurrence in the whole file.\n\n    Type\n        :%s/old/new/gc\n\n    to find every occurrence in the whole file, with a prompt whether to\n    substitute or not."
  },
  {
    "lesson": "Nvim Tutor : Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND",
    "content": "** Type `:!` in vim mode followed by an external command to execute that command. **\n\n 1. Type the familiar command `:` in normal mode to set the cursor at the bottom of\n    the screen. This allows you to enter a command-line command.\n\n 2. Now type the ! (exclamation point) character. This allows you to\n    execute any external shell command.\n\n 3. As an example type \"ls\" following the \"!\" and then hit <Enter>.\n    This will show you a listing of your directory, just as if you were\n    at the shell prompt.\n\nNOTE: It is possible to execute any external command this way, and you\n      can include arguments.\n\nNOTE: All `:` commands are executed when you press <Enter>."
  },
  {
    "lesson": "Nvim Tutor : Lesson 5.2: MORE ON WRITING FILES",
    "content": "** To save the changes made to the text, type `:w` FILENAME. **\n\n 1. Type `:!ls` to get a listing of your directory.\n    You already know you must hit <Enter> after this.\n\n 2. Choose a filename that does not exist yet, such as TEST.\n\n 3. Now type:\n        :w TEST\n    (where TEST is the filename you chose.)\n\n 4. This saves the current file under the name TEST.\n    To verify this, type `:!ls` again to see your directory.\n\nNOTE: If you were to exit Neovim and start it again with `nvim TEST`, the file\n      would be an exact copy of the tutorial when you saved it.\n\n 5. Now remove the file by typing:\n        :!rm TEST"
  },
  {
    "lesson": "Nvim Tutor : Lesson 5.3: SELECTING TEXT TO WRITE",
    "content": "** To save part of the file, type `v` motion `:w FILENAME`. **\n\n 1. Move the cursor to this line.\n\n 2. Press v and move the cursor to the fifth item below. Notice that the\n    text is highlighted.\n\n 3. Press the `:` character. At the bottom of the screen\n\n        `:'<,'>`\n\n    will appear.\n\n 4. Type\n\n        `w TEST`\n\n    where TEST is a filename that does not exist yet. Verify that you see\n\n        `:'<,'>w TEST`\n\n    before you press <Enter>.\n\n 5. Neovim will write the selected lines to the file TEST. Use `:!ls` to see it.\n\nNOTE: Pressing v starts Visual selection. You can move the cursor around to\n      make the selection bigger or smaller. Then you can use an operator to\n      do something with the text. For example, `d` deletes the text."
  },
  {
    "lesson": "Nvim Tutor : Lesson 6.1: THE OPEN COMMAND",
    "content": "** Type `o` to open a line below the cursor and place you in Insert mode. **\n\n 1. Move the cursor to the line below.\n\n 2. Type the lowercase letter `o` to open up a line BELOW the\n    cursor and place you in Insert mode.\n\n 3. Now type some text and press `<Esc>` to exit Insert mode.\n\nAfter typing `o` the cursor is placed on the open line in Insert mode.\n\n 4. To open up a line ABOVE the cursor, simply type a capital O, rather\n    than a lowercase `o`. Try this on the line below.\n\nOpen up a line above this by typing O while the cursor is on this line."
  },
  {
    "lesson": "Nvim Tutor : Lesson 6.2: THE APPEND COMMAND",
    "content": "** Type `a` to insert text AFTER the cursor. **\n\n 1. Move the cursor to the start of the line below.\n\n 2. Press `e` until the cursor is on the end of \"li\".\n\n 3. Type the lowercase letter `a` to append text AFTER the cursor.\n\n 4. Complete the word like the line below it. Press `<Esc>` to exit Insert mode.\n\n 5. Use `e` to move to the next incomplete word and repeat steps 3 and 4.\n\nThis li will allow you to pract appendi text to a line.\nThis line will allow you to practice appending text to a line.\n\nNOTE: a, i, and A all go to the same Insert mode, the only\n      difference is where the characters are inserted."
  },
  {
    "lesson": "Nvim Tutor : Lesson 6.3: ANOTHER WAY TO REPLACE",
    "content": "** Type a capital `R` to replace more than one character. **\n\n 1. Move the cursor to the first line below. Move the cursor to\n    the beginning of the first \"xxx\".\n\n 2. Now press `R` (capital R) and type the number below it in the\n    second line, so that it replaces the \"xxx\".\n\n 3. Press `<Esc>` to leave Replace mode. Notice that\n    the rest of the line remains unmodified.\n\n 4. Repeat the steps to replace the remaining \"xxx\".\n\nAdding 123 to xxx gives you xxx.\nAdding 123 to 456 gives you 579.\n\nNOTE: Replace mode is like Insert mode, but every typed character\n      replaces an existing character."
  },
  {
    "lesson": "Nvim Tutor : lesson 6.4: copy and paste text",
    "content": "** use the `y` operator to copy text and `p` to put it. **\n\n 1. go to the line below and place the cursor after \"a).\".\n\n 2. start visual mode with `v` and move the cursor to just before\n    \"first\".\n\n 3. type `y` to yank (copy) the highlighted text.\n\n 4. move the cursor to the end of the next line: `j$`\n\n 5. type `p` to put (paste) the text.\n\n 6. press `a` and then type \"second\". press `<esc>` to leave\n    insert mode.\n\n 7. use visual mode to select \"item.\", yank it with `y`, move to the\n    end of the next line with `j$` and put the text there with `p`\n\na) this is the first item.\nb)\n\nnote: you can use `y` as an operator: `yw` yanks one word.\n\nnote: you can use `P`(Capital P) to put before the cursor, rather than after."
  },
  {
    "lesson": "Nvim Tutor : lesson 6.5: set option",
    "content": "** Set an option so search and substitute commands ignore case. **\n\nThere are many settings in Neovim that you can configure to suit your needs.\n\n 1. Search for 'ignore' by entering: `/ignore`\n    Repeat several times by pressing `n`.\n\n 2. Set the 'ic' (Ignore case) option by entering:\n\n        :set ic\n\n 3. Now search for 'ignore' again by pressing `n`.\n    Notice that Ignore and IGNORE are now also found.\n\n 4. Set the 'hlsearch' and 'incsearch' options:\n\n        :set hls is\n\n 5. Now type the search command again and see what happens: /ignore <Enter>\n\n 6. To disable ignoring case enter:\n\n        :set noic\n\n 7. To invert the value of a setting, prepend it with \"inv\":\n\n        :set invic\n\nNOTE: To remove the highlighting of matches enter:\n\n        :nohlsearch\n\nNOTE: If you want to ignore case for just one search command, use [\\c](/\c)\n      in the phrase: /ignore\\c <Enter>"
  },
  {
    "lesson": "Nvim Tutor : Lesson 7.1: GETTING HELP",
    "content": "** Use the online help system. **\n\nNeovim has a comprehensive online help system.\n\nTo get started, try one of these three:\n\n  - press the <F1> key (if you have one)\n  - type `:help`\n\nRead the text in the help window to find out how the help works.\nType `<C-w><C-w>` to jump from one window to another.\nType `:q` to close the help window.\n\nYou can find help on just about any subject, by giving an argument to the\n\":help\" command. Try these (don't forget to press <Enter>):\n\n    :help w\n    :help c_CTRL-D\n    :help insert-index\n    :help user-manual"
  },
  {
    "lesson": "Nvim Tutor : Lesson 7.2: CREATE A STARTUP SCRIPT",
    "content": "** Enable Neovim features. **\n\nNeovim is a very configurable editor. You can customise it any way you like.\nTo start using more features create an \"init.vim\" file.\n\n 1. Start editing the \"init.vim\" file.\n\n    `:call mkdir(stdpath('config'),'p')`\n    `:exe 'edit' stdpath('config').'/init.vim'`\n\n 2. Write the file with:\n\n    `:w`\n\nYou can add all your preferred settings to this \"init.vim\" file.\nFor more information type `:help init.vim`."
  },
  {
    "lesson": "Nvim Tutor : Lesson 7.3: COMPLETION",
    "content": "** Command line completion with `<C-d>` and `<Tab>`. **\n\n 1. List the contents of the current directory: `:!ls`\n\n 2. Type the start of a command: `:e`\n\n 3. Press `<C-d>` and Neovim will show a list of commands beginning with \"e\".\n\n 4. Press `<Tab>` and Neovim will complete the command name to \":edit\".\n\n 5. Now add a space and the start of an existing file name: `:edit FIL`\n\n 6. Press `<Tab>`. Neovim will complete the name (\"FIL\" -> \"FILE\", if it is unique).\n\nNOTE: Completion works for many commands. It is especially useful for `:help`."
  },
]
